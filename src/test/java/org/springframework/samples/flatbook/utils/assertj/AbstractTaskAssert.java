package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.Flat;
import org.springframework.samples.flatbook.model.Task;
import org.springframework.samples.flatbook.model.Tenant;

/**
 * Abstract base class for {@link Task} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTaskAssert<S extends AbstractTaskAssert<S, A>, A extends Task> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTaskAssert}</code> to make assertions on actual Task.
   * @param actual the Task we want to make assertions on.
   */
  protected AbstractTaskAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Task's asignee is equal to the given one.
   * @param asignee the given asignee to compare the actual Task's asignee to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's asignee is not equal to the given one.
   */
  public S hasAsignee(Tenant asignee) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asignee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Tenant actualAsignee = actual.getAsignee();
    if (!Objects.areEqual(actualAsignee, asignee)) {
      failWithMessage(assertjErrorMessage, actual, asignee, actualAsignee);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Task's creationDate is equal to the given one.
   * @param creationDate the given creationDate to compare the actual Task's creationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's creationDate is not equal to the given one.
   */
  public S hasCreationDate(java.time.LocalDate creationDate) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualCreationDate = actual.getCreationDate();
    if (!Objects.areEqual(actualCreationDate, creationDate)) {
      failWithMessage(assertjErrorMessage, actual, creationDate, actualCreationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Task's creator is equal to the given one.
   * @param creator the given creator to compare the actual Task's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's creator is not equal to the given one.
   */
  public S hasCreator(Tenant creator) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Tenant actualCreator = actual.getCreator();
    if (!Objects.areEqual(actualCreator, creator)) {
      failWithMessage(assertjErrorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Task's description is equal to the given one.
   * @param description the given description to compare the actual Task's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Task's flat is equal to the given one.
   * @param flat the given flat to compare the actual Task's flat to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's flat is not equal to the given one.
   */
  public S hasFlat(Flat flat) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting flat of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Flat actualFlat = actual.getFlat();
    if (!Objects.areEqual(actualFlat, flat)) {
      failWithMessage(assertjErrorMessage, actual, flat, actualFlat);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Task's status is equal to the given one.
   * @param status the given status to compare the actual Task's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's status is not equal to the given one.
   */
  public S hasStatus(org.springframework.samples.flatbook.model.enums.TaskStatus status) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.flatbook.model.enums.TaskStatus actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Task's title is equal to the given one.
   * @param title the given title to compare the actual Task's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Task's title is not equal to the given one.
   */
  public S hasTitle(String title) {
    // check that actual Task we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
