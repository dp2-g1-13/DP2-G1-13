package org.springframework.samples.flatbook.utils.assertj;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.User;

/**
 * Abstract base class for {@link User} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractUserAssert<S extends AbstractUserAssert<S, A>, A extends User> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractUserAssert}</code> to make assertions on actual User.
   * @param actual the User we want to make assertions on.
   */
  protected AbstractUserAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual User is enabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual User is not enabled.
   */
  public S isEnabled() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isEnabled()) {
      failWithMessage("\nExpecting that actual User is enabled but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User is not enabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual User is enabled.
   */
  public S isNotEnabled() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isEnabled()) {
      failWithMessage("\nExpecting that actual User is not enabled but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's password is equal to the given one.
   * @param password the given password to compare the actual User's password to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's password is not equal to the given one.
   */
  public S hasPassword(String password) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPassword = actual.getPassword();
    if (!Objects.areEqual(actualPassword, password)) {
      failWithMessage(assertjErrorMessage, actual, password, actualPassword);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual User's username is equal to the given one.
   * @param username the given username to compare the actual User's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's username is not equal to the given one.
   */
  public S hasUsername(String username) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUsername = actual.getUsername();
    if (!Objects.areEqual(actualUsername, username)) {
      failWithMessage(assertjErrorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
