package org.springframework.samples.flatbook.utils.assertj;

import org.assertj.core.internal.Iterables;
import org.springframework.samples.flatbook.model.Flat;
import org.springframework.samples.flatbook.model.Host;

/**
 * Abstract base class for {@link Host} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHostAssert<S extends AbstractHostAssert<S, A>, A extends Host> extends AbstractPersonAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHostAssert}</code> to make assertions on actual Host.
   * @param actual the Host we want to make assertions on.
   */
  protected AbstractHostAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Host's flats contains the given Flat elements.
   * @param flats the given elements that should be contained in actual Host's flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats does not contain all given Flat elements.
   */
  public S hasFlats(Flat... flats) {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (flats == null) failWithMessage("Expecting flats parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFlats(), flats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Host's flats contains the given Flat elements in Collection.
   * @param flats the given elements that should be contained in actual Host's flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats does not contain all given Flat elements.
   */
  public S hasFlats(java.util.Collection<? extends Flat> flats) {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (flats == null) {
      failWithMessage("Expecting flats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getFlats(), flats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Host's flats contains <b>only</b> the given Flat elements and nothing else in whatever order.
   * @param flats the given elements that should be contained in actual Host's flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats does not contain all given Flat elements.
   */
  public S hasOnlyFlats(Flat... flats) {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (flats == null) failWithMessage("Expecting flats parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFlats(), flats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Host's flats contains <b>only</b> the given Flat elements in Collection and nothing else in whatever order.
   * @param flats the given elements that should be contained in actual Host's flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats does not contain all given Flat elements.
   */
  public S hasOnlyFlats(java.util.Collection<? extends Flat> flats) {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (flats == null) {
      failWithMessage("Expecting flats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getFlats(), flats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Host's flats does not contain the given Flat elements.
   *
   * @param flats the given elements that should not be in actual Host's flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats contains any given Flat elements.
   */
  public S doesNotHaveFlats(Flat... flats) {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (flats == null) failWithMessage("Expecting flats parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFlats(), flats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Host's flats does not contain the given Flat elements in Collection.
   *
   * @param flats the given elements that should not be in actual Host's flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats contains any given Flat elements.
   */
  public S doesNotHaveFlats(java.util.Collection<? extends Flat> flats) {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (flats == null) {
      failWithMessage("Expecting flats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getFlats(), flats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Host has no flats.
   * @return this assertion object.
   * @throws AssertionError if the actual Host's flats is not empty.
   */
  public S hasNoFlats() {
    // check that actual Host we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have flats but had :\n  <%s>";

    // check
    if (actual.getFlats().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getFlats());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
