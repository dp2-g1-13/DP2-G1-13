package org.springframework.samples.flatbook.utils.assertj;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.dtos.ReviewForm;

/**
 * Abstract base class for {@link ReviewForm} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractReviewFormAssert<S extends AbstractReviewFormAssert<S, A>, A extends ReviewForm> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractReviewFormAssert}</code> to make assertions on actual ReviewForm.
   * @param actual the ReviewForm we want to make assertions on.
   */
  protected AbstractReviewFormAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ReviewForm's creationDate is equal to the given one.
   * @param creationDate the given creationDate to compare the actual ReviewForm's creationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's creationDate is not equal to the given one.
   */
  public S hasCreationDate(java.time.LocalDate creationDate) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualCreationDate = actual.getCreationDate();
    if (!Objects.areEqual(actualCreationDate, creationDate)) {
      failWithMessage(assertjErrorMessage, actual, creationDate, actualCreationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ReviewForm's creator is equal to the given one.
   * @param creator the given creator to compare the actual ReviewForm's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's creator is not equal to the given one.
   */
  public S hasCreator(org.springframework.samples.flatbook.model.Person creator) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.flatbook.model.Person actualCreator = actual.getCreator();
    if (!Objects.areEqual(actualCreator, creator)) {
      failWithMessage(assertjErrorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ReviewForm's description is equal to the given one.
   * @param description the given description to compare the actual ReviewForm's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ReviewForm's modifiedDate is equal to the given one.
   * @param modifiedDate the given modifiedDate to compare the actual ReviewForm's modifiedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's modifiedDate is not equal to the given one.
   */
  public S hasModifiedDate(java.time.LocalDate modifiedDate) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting modifiedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualModifiedDate = actual.getModifiedDate();
    if (!Objects.areEqual(actualModifiedDate, modifiedDate)) {
      failWithMessage(assertjErrorMessage, actual, modifiedDate, actualModifiedDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ReviewForm's rate is equal to the given one.
   * @param rate the given rate to compare the actual ReviewForm's rate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's rate is not equal to the given one.
   */
  public S hasRate(Integer rate) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRate = actual.getRate();
    if (!Objects.areEqual(actualRate, rate)) {
      failWithMessage(assertjErrorMessage, actual, rate, actualRate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ReviewForm's reviewed is equal to the given one.
   * @param reviewed the given reviewed to compare the actual ReviewForm's reviewed to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's reviewed is not equal to the given one.
   */
  public S hasReviewed(String reviewed) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting reviewed of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualReviewed = actual.getReviewed();
    if (!Objects.areEqual(actualReviewed, reviewed)) {
      failWithMessage(assertjErrorMessage, actual, reviewed, actualReviewed);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ReviewForm's type is equal to the given one.
   * @param type the given type to compare the actual ReviewForm's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReviewForm's type is not equal to the given one.
   */
  public S hasType(org.springframework.samples.flatbook.model.enums.ReviewType type) {
    // check that actual ReviewForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.flatbook.model.enums.ReviewType actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
