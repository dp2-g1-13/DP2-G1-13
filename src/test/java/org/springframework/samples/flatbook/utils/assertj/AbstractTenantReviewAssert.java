package org.springframework.samples.flatbook.utils.assertj;

import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.Person;
import org.springframework.samples.flatbook.model.TenantReview;

/**
 * Abstract base class for {@link TenantReview} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTenantReviewAssert<S extends AbstractTenantReviewAssert<S, A>, A extends TenantReview> extends AbstractReviewAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTenantReviewAssert}</code> to make assertions on actual TenantReview.
   * @param actual the TenantReview we want to make assertions on.
   */
  protected AbstractTenantReviewAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual TenantReview's creator is equal to the given one.
   * @param creator the given creator to compare the actual TenantReview's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TenantReview's creator is not equal to the given one.
   */
  public S hasCreator(Person creator) {
    // check that actual TenantReview we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Person actualCreator = actual.getCreator();
    if (!Objects.areEqual(actualCreator, creator)) {
      failWithMessage(assertjErrorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
