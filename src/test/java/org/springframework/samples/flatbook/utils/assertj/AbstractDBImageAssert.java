package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.DBImage;

/**
 * Abstract base class for {@link DBImage} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractDBImageAssert<S extends AbstractDBImageAssert<S, A>, A extends DBImage> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractDBImageAssert}</code> to make assertions on actual DBImage.
   * @param actual the DBImage we want to make assertions on.
   */
  protected AbstractDBImageAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual DBImage's data contains the given byte elements.
   * @param data the given elements that should be contained in actual DBImage's data.
   * @return this assertion object.
   * @throws AssertionError if the actual DBImage's data does not contain all given byte elements.
   */
  public S hasData(byte... data) {
    // check that actual DBImage we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (data == null) failWithMessage("Expecting data parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getData()).contains(data);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DBImage's data contains <b>only</b> the given byte elements and nothing else in whatever order.
   *
   * @param data the given elements that should be contained in actual DBImage's data.
   * @return this assertion object.
   * @throws AssertionError if the actual DBImage's data does not contain all given byte elements and nothing else.
   */
  public S hasOnlyData(byte... data) {
    // check that actual DBImage we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (data == null) failWithMessage("Expecting data parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getData()).containsOnly(data);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DBImage's data does not contain the given byte elements.
   *
   * @param data the given elements that should not be in actual DBImage's data.
   * @return this assertion object.
   * @throws AssertionError if the actual DBImage's data contains any given byte elements.
   */
  public S doesNotHaveData(byte... data) {
    // check that actual DBImage we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (data == null) failWithMessage("Expecting data parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getData()).doesNotContain(data);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DBImage has no data.
   * @return this assertion object.
   * @throws AssertionError if the actual DBImage's data is not empty.
   */
  public S hasNoData() {
    // check that actual DBImage we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have data but had :\n  <%s>";

    // check that it is not empty
    if (actual.getData().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getData()));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual DBImage's fileType is equal to the given one.
   * @param fileType the given fileType to compare the actual DBImage's fileType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DBImage's fileType is not equal to the given one.
   */
  public S hasFileType(String fileType) {
    // check that actual DBImage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fileType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFileType = actual.getFileType();
    if (!Objects.areEqual(actualFileType, fileType)) {
      failWithMessage(assertjErrorMessage, actual, fileType, actualFileType);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DBImage's filename is equal to the given one.
   * @param filename the given filename to compare the actual DBImage's filename to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DBImage's filename is not equal to the given one.
   */
  public S hasFilename(String filename) {
    // check that actual DBImage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting filename of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFilename = actual.getFilename();
    if (!Objects.areEqual(actualFilename, filename)) {
      failWithMessage(assertjErrorMessage, actual, filename, actualFilename);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
