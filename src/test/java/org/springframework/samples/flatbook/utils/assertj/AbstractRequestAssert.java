package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.Request;

/**
 * Abstract base class for {@link Request} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRequestAssert<S extends AbstractRequestAssert<S, A>, A extends Request> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRequestAssert}</code> to make assertions on actual Request.
   * @param actual the Request we want to make assertions on.
   */
  protected AbstractRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Request's creationDate is equal to the given one.
   * @param creationDate the given creationDate to compare the actual Request's creationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Request's creationDate is not equal to the given one.
   */
  public S hasCreationDate(java.time.LocalDateTime creationDate) {
    // check that actual Request we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDateTime actualCreationDate = actual.getCreationDate();
    if (!Objects.areEqual(actualCreationDate, creationDate)) {
      failWithMessage(assertjErrorMessage, actual, creationDate, actualCreationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Request's description is equal to the given one.
   * @param description the given description to compare the actual Request's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Request's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual Request we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Request's finishDate is equal to the given one.
   * @param finishDate the given finishDate to compare the actual Request's finishDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Request's finishDate is not equal to the given one.
   */
  public S hasFinishDate(java.time.LocalDate finishDate) {
    // check that actual Request we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting finishDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualFinishDate = actual.getFinishDate();
    if (!Objects.areEqual(actualFinishDate, finishDate)) {
      failWithMessage(assertjErrorMessage, actual, finishDate, actualFinishDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Request's startDate is equal to the given one.
   * @param startDate the given startDate to compare the actual Request's startDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Request's startDate is not equal to the given one.
   */
  public S hasStartDate(java.time.LocalDate startDate) {
    // check that actual Request we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualStartDate = actual.getStartDate();
    if (!Objects.areEqual(actualStartDate, startDate)) {
      failWithMessage(assertjErrorMessage, actual, startDate, actualStartDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Request's status is equal to the given one.
   * @param status the given status to compare the actual Request's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Request's status is not equal to the given one.
   */
  public S hasStatus(org.springframework.samples.flatbook.model.enums.RequestStatus status) {
    // check that actual Request we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.springframework.samples.flatbook.model.enums.RequestStatus actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
