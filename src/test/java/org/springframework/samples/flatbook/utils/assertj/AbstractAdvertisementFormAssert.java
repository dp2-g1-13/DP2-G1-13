package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.dtos.AdvertisementForm;

/**
 * Abstract base class for {@link AdvertisementForm} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAdvertisementFormAssert<S extends AbstractAdvertisementFormAssert<S, A>, A extends AdvertisementForm> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAdvertisementFormAssert}</code> to make assertions on actual AdvertisementForm.
   * @param actual the AdvertisementForm we want to make assertions on.
   */
  protected AbstractAdvertisementFormAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual AdvertisementForm's description is equal to the given one.
   * @param description the given description to compare the actual AdvertisementForm's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AdvertisementForm's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual AdvertisementForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AdvertisementForm's pricePerMonth is equal to the given one.
   * @param pricePerMonth the given pricePerMonth to compare the actual AdvertisementForm's pricePerMonth to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AdvertisementForm's pricePerMonth is not equal to the given one.
   */
  public S hasPricePerMonth(Double pricePerMonth) {
    // check that actual AdvertisementForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pricePerMonth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualPricePerMonth = actual.getPricePerMonth();
    if (!Objects.areEqual(actualPricePerMonth, pricePerMonth)) {
      failWithMessage(assertjErrorMessage, actual, pricePerMonth, actualPricePerMonth);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AdvertisementForm's pricePerMonth is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param pricePerMonth the value to compare the actual AdvertisementForm's pricePerMonth to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual AdvertisementForm's pricePerMonth is not close enough to the given value.
   */
  public S hasPricePerMonthCloseTo(Double pricePerMonth, Double assertjOffset) {
    // check that actual AdvertisementForm we want to make assertions on is not null.
    isNotNull();

    Double actualPricePerMonth = actual.getPricePerMonth();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting pricePerMonth:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualPricePerMonth, pricePerMonth, assertjOffset, Math.abs(pricePerMonth - actualPricePerMonth));

    // check
    Assertions.assertThat(actualPricePerMonth).overridingErrorMessage(assertjErrorMessage).isCloseTo(pricePerMonth, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AdvertisementForm's requirements is equal to the given one.
   * @param requirements the given requirements to compare the actual AdvertisementForm's requirements to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AdvertisementForm's requirements is not equal to the given one.
   */
  public S hasRequirements(String requirements) {
    // check that actual AdvertisementForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requirements of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRequirements = actual.getRequirements();
    if (!Objects.areEqual(actualRequirements, requirements)) {
      failWithMessage(assertjErrorMessage, actual, requirements, actualRequirements);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual AdvertisementForm's title is equal to the given one.
   * @param title the given title to compare the actual AdvertisementForm's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AdvertisementForm's title is not equal to the given one.
   */
  public S hasTitle(String title) {
    // check that actual AdvertisementForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
