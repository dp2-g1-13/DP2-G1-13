package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.Review;

/**
 * Abstract base class for {@link Review} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractReviewAssert<S extends AbstractReviewAssert<S, A>, A extends Review> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractReviewAssert}</code> to make assertions on actual Review.
   * @param actual the Review we want to make assertions on.
   */
  protected AbstractReviewAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Review's creationDate is equal to the given one.
   * @param creationDate the given creationDate to compare the actual Review's creationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Review's creationDate is not equal to the given one.
   */
  public S hasCreationDate(java.time.LocalDate creationDate) {
    // check that actual Review we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualCreationDate = actual.getCreationDate();
    if (!Objects.areEqual(actualCreationDate, creationDate)) {
      failWithMessage(assertjErrorMessage, actual, creationDate, actualCreationDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Review's description is equal to the given one.
   * @param description the given description to compare the actual Review's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Review's description is not equal to the given one.
   */
  public S hasDescription(String description) {
    // check that actual Review we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Review's modifiedDate is equal to the given one.
   * @param modifiedDate the given modifiedDate to compare the actual Review's modifiedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Review's modifiedDate is not equal to the given one.
   */
  public S hasModifiedDate(java.time.LocalDate modifiedDate) {
    // check that actual Review we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting modifiedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.time.LocalDate actualModifiedDate = actual.getModifiedDate();
    if (!Objects.areEqual(actualModifiedDate, modifiedDate)) {
      failWithMessage(assertjErrorMessage, actual, modifiedDate, actualModifiedDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Review's rate is equal to the given one.
   * @param rate the given rate to compare the actual Review's rate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Review's rate is not equal to the given one.
   */
  public S hasRate(Integer rate) {
    // check that actual Review we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualRate = actual.getRate();
    if (!Objects.areEqual(actualRate, rate)) {
      failWithMessage(assertjErrorMessage, actual, rate, actualRate);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
