package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.Flat;
import org.springframework.samples.flatbook.model.Request;
import org.springframework.samples.flatbook.model.Tenant;
import org.springframework.samples.flatbook.model.TenantReview;

/**
 * Abstract base class for {@link Tenant} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTenantAssert<S extends AbstractTenantAssert<S, A>, A extends Tenant> extends AbstractPersonAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTenantAssert}</code> to make assertions on actual Tenant.
   * @param actual the Tenant we want to make assertions on.
   */
  protected AbstractTenantAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Tenant's flat is equal to the given one.
   * @param flat the given flat to compare the actual Tenant's flat to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Tenant's flat is not equal to the given one.
   */
  public S hasFlat(Flat flat) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting flat of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Flat actualFlat = actual.getFlat();
    if (!Objects.areEqual(actualFlat, flat)) {
      failWithMessage(assertjErrorMessage, actual, flat, actualFlat);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's requests contains the given Request elements.
   * @param requests the given elements that should be contained in actual Tenant's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests does not contain all given Request elements.
   */
  public S hasRequests(Request... requests) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given Request varargs is not null.
    if (requests == null) failWithMessage("Expecting requests parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRequests(), requests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's requests contains the given Request elements in Collection.
   * @param requests the given elements that should be contained in actual Tenant's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests does not contain all given Request elements.
   */
  public S hasRequests(java.util.Collection<? extends Request> requests) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given Request collection is not null.
    if (requests == null) {
      failWithMessage("Expecting requests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getRequests(), requests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's requests contains <b>only</b> the given Request elements and nothing else in whatever order.
   * @param requests the given elements that should be contained in actual Tenant's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests does not contain all given Request elements.
   */
  public S hasOnlyRequests(Request... requests) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given Request varargs is not null.
    if (requests == null) failWithMessage("Expecting requests parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRequests(), requests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's requests contains <b>only</b> the given Request elements in Collection and nothing else in whatever order.
   * @param requests the given elements that should be contained in actual Tenant's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests does not contain all given Request elements.
   */
  public S hasOnlyRequests(java.util.Collection<? extends Request> requests) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given Request collection is not null.
    if (requests == null) {
      failWithMessage("Expecting requests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getRequests(), requests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's requests does not contain the given Request elements.
   *
   * @param requests the given elements that should not be in actual Tenant's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests contains any given Request elements.
   */
  public S doesNotHaveRequests(Request... requests) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given Request varargs is not null.
    if (requests == null) failWithMessage("Expecting requests parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRequests(), requests);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's requests does not contain the given Request elements in Collection.
   *
   * @param requests the given elements that should not be in actual Tenant's requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests contains any given Request elements.
   */
  public S doesNotHaveRequests(java.util.Collection<? extends Request> requests) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given Request collection is not null.
    if (requests == null) {
      failWithMessage("Expecting requests parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getRequests(), requests.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant has no requests.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's requests is not empty.
   */
  public S hasNoRequests() {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have requests but had :\n  <%s>";

    // check
    if (actual.getRequests().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getRequests());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Tenant's reviews contains the given TenantReview elements.
   * @param reviews the given elements that should be contained in actual Tenant's reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews does not contain all given TenantReview elements.
   */
  public S hasReviews(TenantReview... reviews) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given TenantReview varargs is not null.
    if (reviews == null) failWithMessage("Expecting reviews parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReviews(), reviews);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's reviews contains the given TenantReview elements in Collection.
   * @param reviews the given elements that should be contained in actual Tenant's reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews does not contain all given TenantReview elements.
   */
  public S hasReviews(java.util.Collection<? extends TenantReview> reviews) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given TenantReview collection is not null.
    if (reviews == null) {
      failWithMessage("Expecting reviews parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReviews(), reviews.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's reviews contains <b>only</b> the given TenantReview elements and nothing else in whatever order.
   * @param reviews the given elements that should be contained in actual Tenant's reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews does not contain all given TenantReview elements.
   */
  public S hasOnlyReviews(TenantReview... reviews) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given TenantReview varargs is not null.
    if (reviews == null) failWithMessage("Expecting reviews parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReviews(), reviews);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's reviews contains <b>only</b> the given TenantReview elements in Collection and nothing else in whatever order.
   * @param reviews the given elements that should be contained in actual Tenant's reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews does not contain all given TenantReview elements.
   */
  public S hasOnlyReviews(java.util.Collection<? extends TenantReview> reviews) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given TenantReview collection is not null.
    if (reviews == null) {
      failWithMessage("Expecting reviews parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReviews(), reviews.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's reviews does not contain the given TenantReview elements.
   *
   * @param reviews the given elements that should not be in actual Tenant's reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews contains any given TenantReview elements.
   */
  public S doesNotHaveReviews(TenantReview... reviews) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given TenantReview varargs is not null.
    if (reviews == null) failWithMessage("Expecting reviews parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReviews(), reviews);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant's reviews does not contain the given TenantReview elements in Collection.
   *
   * @param reviews the given elements that should not be in actual Tenant's reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews contains any given TenantReview elements.
   */
  public S doesNotHaveReviews(java.util.Collection<? extends TenantReview> reviews) {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // check that given TenantReview collection is not null.
    if (reviews == null) {
      failWithMessage("Expecting reviews parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReviews(), reviews.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tenant has no reviews.
   * @return this assertion object.
   * @throws AssertionError if the actual Tenant's reviews is not empty.
   */
  public S hasNoReviews() {
    // check that actual Tenant we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have reviews but had :\n  <%s>";

    // check
    if (actual.getReviews().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReviews());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
