package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.FlatReview;
import org.springframework.samples.flatbook.model.Tenant;

/**
 * Abstract base class for {@link FlatReview} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFlatReviewAssert<S extends AbstractFlatReviewAssert<S, A>, A extends FlatReview> extends AbstractReviewAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFlatReviewAssert}</code> to make assertions on actual FlatReview.
   * @param actual the FlatReview we want to make assertions on.
   */
  protected AbstractFlatReviewAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual FlatReview's creator is equal to the given one.
   * @param creator the given creator to compare the actual FlatReview's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FlatReview's creator is not equal to the given one.
   */
  public S hasCreator(Tenant creator) {
    // check that actual FlatReview we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Tenant actualCreator = actual.getCreator();
    if (!Objects.areEqual(actualCreator, creator)) {
      failWithMessage(assertjErrorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
