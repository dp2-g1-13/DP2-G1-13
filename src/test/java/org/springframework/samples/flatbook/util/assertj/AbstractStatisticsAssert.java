package org.springframework.samples.flatbook.util.assertj;

import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;
import org.springframework.samples.flatbook.model.*;

/**
 * Abstract base class for {@link Statistics} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractStatisticsAssert<S extends AbstractStatisticsAssert<S, A>, A extends Statistics> extends AbstractBaseEntityAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractStatisticsAssert}</code> to make assertions on actual Statistics.
   * @param actual the Statistics we want to make assertions on.
   */
  protected AbstractStatisticsAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Statistics's numberOfAdvertisements is equal to the given one.
   * @param numberOfAdvertisements the given numberOfAdvertisements to compare the actual Statistics's numberOfAdvertisements to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's numberOfAdvertisements is not equal to the given one.
   */
  public S hasNumberOfAdvertisements(Integer numberOfAdvertisements) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfAdvertisements of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualNumberOfAdvertisements = actual.getNumberOfAdvertisements();
    if (!Objects.areEqual(actualNumberOfAdvertisements, numberOfAdvertisements)) {
      failWithMessage(assertjErrorMessage, actual, numberOfAdvertisements, actualNumberOfAdvertisements);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's numberOfFlats is equal to the given one.
   * @param numberOfFlats the given numberOfFlats to compare the actual Statistics's numberOfFlats to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's numberOfFlats is not equal to the given one.
   */
  public S hasNumberOfFlats(Integer numberOfFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfFlats of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualNumberOfFlats = actual.getNumberOfFlats();
    if (!Objects.areEqual(actualNumberOfFlats, numberOfFlats)) {
      failWithMessage(assertjErrorMessage, actual, numberOfFlats, actualNumberOfFlats);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's numberOfRequests is equal to the given one.
   * @param numberOfRequests the given numberOfRequests to compare the actual Statistics's numberOfRequests to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's numberOfRequests is not equal to the given one.
   */
  public S hasNumberOfRequests(Integer numberOfRequests) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfRequests of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualNumberOfRequests = actual.getNumberOfRequests();
    if (!Objects.areEqual(actualNumberOfRequests, numberOfRequests)) {
      failWithMessage(assertjErrorMessage, actual, numberOfRequests, actualNumberOfRequests);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's numberOfUsers is equal to the given one.
   * @param numberOfUsers the given numberOfUsers to compare the actual Statistics's numberOfUsers to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's numberOfUsers is not equal to the given one.
   */
  public S hasNumberOfUsers(Integer numberOfUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfUsers of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualNumberOfUsers = actual.getNumberOfUsers();
    if (!Objects.areEqual(actualNumberOfUsers, numberOfUsers)) {
      failWithMessage(assertjErrorMessage, actual, numberOfUsers, actualNumberOfUsers);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfAcceptedRequests is equal to the given one.
   * @param ratioOfAcceptedRequests the given ratioOfAcceptedRequests to compare the actual Statistics's ratioOfAcceptedRequests to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfAcceptedRequests is not equal to the given one.
   */
  public S hasRatioOfAcceptedRequests(Double ratioOfAcceptedRequests) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ratioOfAcceptedRequests of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualRatioOfAcceptedRequests = actual.getRatioOfAcceptedRequests();
    if (!Objects.areEqual(actualRatioOfAcceptedRequests, ratioOfAcceptedRequests)) {
      failWithMessage(assertjErrorMessage, actual, ratioOfAcceptedRequests, actualRatioOfAcceptedRequests);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfAcceptedRequests is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param ratioOfAcceptedRequests the value to compare the actual Statistics's ratioOfAcceptedRequests to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfAcceptedRequests is not close enough to the given value.
   */
  public S hasRatioOfAcceptedRequestsCloseTo(Double ratioOfAcceptedRequests, Double assertjOffset) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    Double actualRatioOfAcceptedRequests = actual.getRatioOfAcceptedRequests();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting ratioOfAcceptedRequests:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRatioOfAcceptedRequests, ratioOfAcceptedRequests, assertjOffset, Math.abs(ratioOfAcceptedRequests - actualRatioOfAcceptedRequests));

    // check
    Assertions.assertThat(actualRatioOfAcceptedRequests).overridingErrorMessage(assertjErrorMessage).isCloseTo(ratioOfAcceptedRequests, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfCanceledRequests is equal to the given one.
   * @param ratioOfCanceledRequests the given ratioOfCanceledRequests to compare the actual Statistics's ratioOfCanceledRequests to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfCanceledRequests is not equal to the given one.
   */
  public S hasRatioOfCanceledRequests(Double ratioOfCanceledRequests) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ratioOfCanceledRequests of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualRatioOfCanceledRequests = actual.getRatioOfCanceledRequests();
    if (!Objects.areEqual(actualRatioOfCanceledRequests, ratioOfCanceledRequests)) {
      failWithMessage(assertjErrorMessage, actual, ratioOfCanceledRequests, actualRatioOfCanceledRequests);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfCanceledRequests is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param ratioOfCanceledRequests the value to compare the actual Statistics's ratioOfCanceledRequests to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfCanceledRequests is not close enough to the given value.
   */
  public S hasRatioOfCanceledRequestsCloseTo(Double ratioOfCanceledRequests, Double assertjOffset) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    Double actualRatioOfCanceledRequests = actual.getRatioOfCanceledRequests();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting ratioOfCanceledRequests:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRatioOfCanceledRequests, ratioOfCanceledRequests, assertjOffset, Math.abs(ratioOfCanceledRequests - actualRatioOfCanceledRequests));

    // check
    Assertions.assertThat(actualRatioOfCanceledRequests).overridingErrorMessage(assertjErrorMessage).isCloseTo(ratioOfCanceledRequests, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfFinishedRequests is equal to the given one.
   * @param ratioOfFinishedRequests the given ratioOfFinishedRequests to compare the actual Statistics's ratioOfFinishedRequests to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfFinishedRequests is not equal to the given one.
   */
  public S hasRatioOfFinishedRequests(Double ratioOfFinishedRequests) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ratioOfFinishedRequests of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualRatioOfFinishedRequests = actual.getRatioOfFinishedRequests();
    if (!Objects.areEqual(actualRatioOfFinishedRequests, ratioOfFinishedRequests)) {
      failWithMessage(assertjErrorMessage, actual, ratioOfFinishedRequests, actualRatioOfFinishedRequests);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfFinishedRequests is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param ratioOfFinishedRequests the value to compare the actual Statistics's ratioOfFinishedRequests to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfFinishedRequests is not close enough to the given value.
   */
  public S hasRatioOfFinishedRequestsCloseTo(Double ratioOfFinishedRequests, Double assertjOffset) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    Double actualRatioOfFinishedRequests = actual.getRatioOfFinishedRequests();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting ratioOfFinishedRequests:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRatioOfFinishedRequests, ratioOfFinishedRequests, assertjOffset, Math.abs(ratioOfFinishedRequests - actualRatioOfFinishedRequests));

    // check
    Assertions.assertThat(actualRatioOfFinishedRequests).overridingErrorMessage(assertjErrorMessage).isCloseTo(ratioOfFinishedRequests, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfFlatsWithAdvertisement is equal to the given one.
   * @param ratioOfFlatsWithAdvertisement the given ratioOfFlatsWithAdvertisement to compare the actual Statistics's ratioOfFlatsWithAdvertisement to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfFlatsWithAdvertisement is not equal to the given one.
   */
  public S hasRatioOfFlatsWithAdvertisement(Double ratioOfFlatsWithAdvertisement) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ratioOfFlatsWithAdvertisement of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualRatioOfFlatsWithAdvertisement = actual.getRatioOfFlatsWithAdvertisement();
    if (!Objects.areEqual(actualRatioOfFlatsWithAdvertisement, ratioOfFlatsWithAdvertisement)) {
      failWithMessage(assertjErrorMessage, actual, ratioOfFlatsWithAdvertisement, actualRatioOfFlatsWithAdvertisement);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfFlatsWithAdvertisement is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param ratioOfFlatsWithAdvertisement the value to compare the actual Statistics's ratioOfFlatsWithAdvertisement to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfFlatsWithAdvertisement is not close enough to the given value.
   */
  public S hasRatioOfFlatsWithAdvertisementCloseTo(Double ratioOfFlatsWithAdvertisement, Double assertjOffset) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    Double actualRatioOfFlatsWithAdvertisement = actual.getRatioOfFlatsWithAdvertisement();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting ratioOfFlatsWithAdvertisement:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRatioOfFlatsWithAdvertisement, ratioOfFlatsWithAdvertisement, assertjOffset, Math.abs(ratioOfFlatsWithAdvertisement - actualRatioOfFlatsWithAdvertisement));

    // check
    Assertions.assertThat(actualRatioOfFlatsWithAdvertisement).overridingErrorMessage(assertjErrorMessage).isCloseTo(ratioOfFlatsWithAdvertisement, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfRejectedRequests is equal to the given one.
   * @param ratioOfRejectedRequests the given ratioOfRejectedRequests to compare the actual Statistics's ratioOfRejectedRequests to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfRejectedRequests is not equal to the given one.
   */
  public S hasRatioOfRejectedRequests(Double ratioOfRejectedRequests) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ratioOfRejectedRequests of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualRatioOfRejectedRequests = actual.getRatioOfRejectedRequests();
    if (!Objects.areEqual(actualRatioOfRejectedRequests, ratioOfRejectedRequests)) {
      failWithMessage(assertjErrorMessage, actual, ratioOfRejectedRequests, actualRatioOfRejectedRequests);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's ratioOfRejectedRequests is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param ratioOfRejectedRequests the value to compare the actual Statistics's ratioOfRejectedRequests to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Statistics's ratioOfRejectedRequests is not close enough to the given value.
   */
  public S hasRatioOfRejectedRequestsCloseTo(Double ratioOfRejectedRequests, Double assertjOffset) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    Double actualRatioOfRejectedRequests = actual.getRatioOfRejectedRequests();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting ratioOfRejectedRequests:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRatioOfRejectedRequests, ratioOfRejectedRequests, assertjOffset, Math.abs(ratioOfRejectedRequests - actualRatioOfRejectedRequests));

    // check
    Assertions.assertThat(actualRatioOfRejectedRequests).overridingErrorMessage(assertjErrorMessage).isCloseTo(ratioOfRejectedRequests, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedFlats contains the given Flat elements.
   * @param topThreeBestReviewedFlats the given elements that should be contained in actual Statistics's topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats does not contain all given Flat elements.
   */
  public S hasTopThreeBestReviewedFlats(Flat... topThreeBestReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (topThreeBestReviewedFlats == null) failWithMessage("Expecting topThreeBestReviewedFlats parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeBestReviewedFlats(), topThreeBestReviewedFlats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedFlats contains the given Flat elements in Collection.
   * @param topThreeBestReviewedFlats the given elements that should be contained in actual Statistics's topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats does not contain all given Flat elements.
   */
  public S hasTopThreeBestReviewedFlats(java.util.Collection<? extends Flat> topThreeBestReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (topThreeBestReviewedFlats == null) {
      failWithMessage("Expecting topThreeBestReviewedFlats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeBestReviewedFlats(), topThreeBestReviewedFlats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedFlats contains <b>only</b> the given Flat elements and nothing else in whatever order.
   * @param topThreeBestReviewedFlats the given elements that should be contained in actual Statistics's topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats does not contain all given Flat elements.
   */
  public S hasOnlyTopThreeBestReviewedFlats(Flat... topThreeBestReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (topThreeBestReviewedFlats == null) failWithMessage("Expecting topThreeBestReviewedFlats parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeBestReviewedFlats(), topThreeBestReviewedFlats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedFlats contains <b>only</b> the given Flat elements in Collection and nothing else in whatever order.
   * @param topThreeBestReviewedFlats the given elements that should be contained in actual Statistics's topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats does not contain all given Flat elements.
   */
  public S hasOnlyTopThreeBestReviewedFlats(java.util.Collection<? extends Flat> topThreeBestReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (topThreeBestReviewedFlats == null) {
      failWithMessage("Expecting topThreeBestReviewedFlats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeBestReviewedFlats(), topThreeBestReviewedFlats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedFlats does not contain the given Flat elements.
   *
   * @param topThreeBestReviewedFlats the given elements that should not be in actual Statistics's topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats contains any given Flat elements.
   */
  public S doesNotHaveTopThreeBestReviewedFlats(Flat... topThreeBestReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (topThreeBestReviewedFlats == null) failWithMessage("Expecting topThreeBestReviewedFlats parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeBestReviewedFlats(), topThreeBestReviewedFlats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedFlats does not contain the given Flat elements in Collection.
   *
   * @param topThreeBestReviewedFlats the given elements that should not be in actual Statistics's topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats contains any given Flat elements.
   */
  public S doesNotHaveTopThreeBestReviewedFlats(java.util.Collection<? extends Flat> topThreeBestReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (topThreeBestReviewedFlats == null) {
      failWithMessage("Expecting topThreeBestReviewedFlats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeBestReviewedFlats(), topThreeBestReviewedFlats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeBestReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedFlats is not empty.
   */
  public S hasNoTopThreeBestReviewedFlats() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeBestReviewedFlats but had :\n  <%s>";

    // check
    if (actual.getTopThreeBestReviewedFlats().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeBestReviewedFlats());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Statistics's topThreeBestReviewedHosts contains the given Host elements.
   * @param topThreeBestReviewedHosts the given elements that should be contained in actual Statistics's topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts does not contain all given Host elements.
   */
  public S hasTopThreeBestReviewedHosts(Host... topThreeBestReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host varargs is not null.
    if (topThreeBestReviewedHosts == null) failWithMessage("Expecting topThreeBestReviewedHosts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeBestReviewedHosts(), topThreeBestReviewedHosts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedHosts contains the given Host elements in Collection.
   * @param topThreeBestReviewedHosts the given elements that should be contained in actual Statistics's topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts does not contain all given Host elements.
   */
  public S hasTopThreeBestReviewedHosts(java.util.Collection<? extends Host> topThreeBestReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host collection is not null.
    if (topThreeBestReviewedHosts == null) {
      failWithMessage("Expecting topThreeBestReviewedHosts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeBestReviewedHosts(), topThreeBestReviewedHosts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedHosts contains <b>only</b> the given Host elements and nothing else in whatever order.
   * @param topThreeBestReviewedHosts the given elements that should be contained in actual Statistics's topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts does not contain all given Host elements.
   */
  public S hasOnlyTopThreeBestReviewedHosts(Host... topThreeBestReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host varargs is not null.
    if (topThreeBestReviewedHosts == null) failWithMessage("Expecting topThreeBestReviewedHosts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeBestReviewedHosts(), topThreeBestReviewedHosts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedHosts contains <b>only</b> the given Host elements in Collection and nothing else in whatever order.
   * @param topThreeBestReviewedHosts the given elements that should be contained in actual Statistics's topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts does not contain all given Host elements.
   */
  public S hasOnlyTopThreeBestReviewedHosts(java.util.Collection<? extends Host> topThreeBestReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host collection is not null.
    if (topThreeBestReviewedHosts == null) {
      failWithMessage("Expecting topThreeBestReviewedHosts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeBestReviewedHosts(), topThreeBestReviewedHosts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedHosts does not contain the given Host elements.
   *
   * @param topThreeBestReviewedHosts the given elements that should not be in actual Statistics's topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts contains any given Host elements.
   */
  public S doesNotHaveTopThreeBestReviewedHosts(Host... topThreeBestReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host varargs is not null.
    if (topThreeBestReviewedHosts == null) failWithMessage("Expecting topThreeBestReviewedHosts parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeBestReviewedHosts(), topThreeBestReviewedHosts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedHosts does not contain the given Host elements in Collection.
   *
   * @param topThreeBestReviewedHosts the given elements that should not be in actual Statistics's topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts contains any given Host elements.
   */
  public S doesNotHaveTopThreeBestReviewedHosts(java.util.Collection<? extends Host> topThreeBestReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host collection is not null.
    if (topThreeBestReviewedHosts == null) {
      failWithMessage("Expecting topThreeBestReviewedHosts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeBestReviewedHosts(), topThreeBestReviewedHosts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeBestReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedHosts is not empty.
   */
  public S hasNoTopThreeBestReviewedHosts() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeBestReviewedHosts but had :\n  <%s>";

    // check
    if (actual.getTopThreeBestReviewedHosts().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeBestReviewedHosts());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Statistics's topThreeBestReviewedTenants contains the given Tenant elements.
   * @param topThreeBestReviewedTenants the given elements that should be contained in actual Statistics's topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants does not contain all given Tenant elements.
   */
  public S hasTopThreeBestReviewedTenants(Tenant... topThreeBestReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant varargs is not null.
    if (topThreeBestReviewedTenants == null) failWithMessage("Expecting topThreeBestReviewedTenants parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeBestReviewedTenants(), topThreeBestReviewedTenants);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedTenants contains the given Tenant elements in Collection.
   * @param topThreeBestReviewedTenants the given elements that should be contained in actual Statistics's topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants does not contain all given Tenant elements.
   */
  public S hasTopThreeBestReviewedTenants(java.util.Collection<? extends Tenant> topThreeBestReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant collection is not null.
    if (topThreeBestReviewedTenants == null) {
      failWithMessage("Expecting topThreeBestReviewedTenants parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeBestReviewedTenants(), topThreeBestReviewedTenants.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedTenants contains <b>only</b> the given Tenant elements and nothing else in whatever order.
   * @param topThreeBestReviewedTenants the given elements that should be contained in actual Statistics's topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants does not contain all given Tenant elements.
   */
  public S hasOnlyTopThreeBestReviewedTenants(Tenant... topThreeBestReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant varargs is not null.
    if (topThreeBestReviewedTenants == null) failWithMessage("Expecting topThreeBestReviewedTenants parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeBestReviewedTenants(), topThreeBestReviewedTenants);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedTenants contains <b>only</b> the given Tenant elements in Collection and nothing else in whatever order.
   * @param topThreeBestReviewedTenants the given elements that should be contained in actual Statistics's topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants does not contain all given Tenant elements.
   */
  public S hasOnlyTopThreeBestReviewedTenants(java.util.Collection<? extends Tenant> topThreeBestReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant collection is not null.
    if (topThreeBestReviewedTenants == null) {
      failWithMessage("Expecting topThreeBestReviewedTenants parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeBestReviewedTenants(), topThreeBestReviewedTenants.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedTenants does not contain the given Tenant elements.
   *
   * @param topThreeBestReviewedTenants the given elements that should not be in actual Statistics's topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants contains any given Tenant elements.
   */
  public S doesNotHaveTopThreeBestReviewedTenants(Tenant... topThreeBestReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant varargs is not null.
    if (topThreeBestReviewedTenants == null) failWithMessage("Expecting topThreeBestReviewedTenants parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeBestReviewedTenants(), topThreeBestReviewedTenants);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeBestReviewedTenants does not contain the given Tenant elements in Collection.
   *
   * @param topThreeBestReviewedTenants the given elements that should not be in actual Statistics's topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants contains any given Tenant elements.
   */
  public S doesNotHaveTopThreeBestReviewedTenants(java.util.Collection<? extends Tenant> topThreeBestReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant collection is not null.
    if (topThreeBestReviewedTenants == null) {
      failWithMessage("Expecting topThreeBestReviewedTenants parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeBestReviewedTenants(), topThreeBestReviewedTenants.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeBestReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeBestReviewedTenants is not empty.
   */
  public S hasNoTopThreeBestReviewedTenants() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeBestReviewedTenants but had :\n  <%s>";

    // check
    if (actual.getTopThreeBestReviewedTenants().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeBestReviewedTenants());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Statistics's topThreeMostReportedUsers contains the given Person elements.
   * @param topThreeMostReportedUsers the given elements that should be contained in actual Statistics's topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers does not contain all given Person elements.
   */
  public S hasTopThreeMostReportedUsers(Person... topThreeMostReportedUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Person varargs is not null.
    if (topThreeMostReportedUsers == null) failWithMessage("Expecting topThreeMostReportedUsers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeMostReportedUsers(), topThreeMostReportedUsers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeMostReportedUsers contains the given Person elements in Collection.
   * @param topThreeMostReportedUsers the given elements that should be contained in actual Statistics's topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers does not contain all given Person elements.
   */
  public S hasTopThreeMostReportedUsers(java.util.Collection<? extends Person> topThreeMostReportedUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Person collection is not null.
    if (topThreeMostReportedUsers == null) {
      failWithMessage("Expecting topThreeMostReportedUsers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeMostReportedUsers(), topThreeMostReportedUsers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeMostReportedUsers contains <b>only</b> the given Person elements and nothing else in whatever order.
   * @param topThreeMostReportedUsers the given elements that should be contained in actual Statistics's topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers does not contain all given Person elements.
   */
  public S hasOnlyTopThreeMostReportedUsers(Person... topThreeMostReportedUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Person varargs is not null.
    if (topThreeMostReportedUsers == null) failWithMessage("Expecting topThreeMostReportedUsers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeMostReportedUsers(), topThreeMostReportedUsers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeMostReportedUsers contains <b>only</b> the given Person elements in Collection and nothing else in whatever order.
   * @param topThreeMostReportedUsers the given elements that should be contained in actual Statistics's topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers does not contain all given Person elements.
   */
  public S hasOnlyTopThreeMostReportedUsers(java.util.Collection<? extends Person> topThreeMostReportedUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Person collection is not null.
    if (topThreeMostReportedUsers == null) {
      failWithMessage("Expecting topThreeMostReportedUsers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeMostReportedUsers(), topThreeMostReportedUsers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeMostReportedUsers does not contain the given Person elements.
   *
   * @param topThreeMostReportedUsers the given elements that should not be in actual Statistics's topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers contains any given Person elements.
   */
  public S doesNotHaveTopThreeMostReportedUsers(Person... topThreeMostReportedUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Person varargs is not null.
    if (topThreeMostReportedUsers == null) failWithMessage("Expecting topThreeMostReportedUsers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeMostReportedUsers(), topThreeMostReportedUsers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeMostReportedUsers does not contain the given Person elements in Collection.
   *
   * @param topThreeMostReportedUsers the given elements that should not be in actual Statistics's topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers contains any given Person elements.
   */
  public S doesNotHaveTopThreeMostReportedUsers(java.util.Collection<? extends Person> topThreeMostReportedUsers) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Person collection is not null.
    if (topThreeMostReportedUsers == null) {
      failWithMessage("Expecting topThreeMostReportedUsers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeMostReportedUsers(), topThreeMostReportedUsers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeMostReportedUsers.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeMostReportedUsers is not empty.
   */
  public S hasNoTopThreeMostReportedUsers() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeMostReportedUsers but had :\n  <%s>";

    // check
    if (actual.getTopThreeMostReportedUsers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeMostReportedUsers());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedFlats contains the given Flat elements.
   * @param topThreeWorstReviewedFlats the given elements that should be contained in actual Statistics's topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats does not contain all given Flat elements.
   */
  public S hasTopThreeWorstReviewedFlats(Flat... topThreeWorstReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (topThreeWorstReviewedFlats == null) failWithMessage("Expecting topThreeWorstReviewedFlats parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeWorstReviewedFlats(), topThreeWorstReviewedFlats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedFlats contains the given Flat elements in Collection.
   * @param topThreeWorstReviewedFlats the given elements that should be contained in actual Statistics's topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats does not contain all given Flat elements.
   */
  public S hasTopThreeWorstReviewedFlats(java.util.Collection<? extends Flat> topThreeWorstReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (topThreeWorstReviewedFlats == null) {
      failWithMessage("Expecting topThreeWorstReviewedFlats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeWorstReviewedFlats(), topThreeWorstReviewedFlats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedFlats contains <b>only</b> the given Flat elements and nothing else in whatever order.
   * @param topThreeWorstReviewedFlats the given elements that should be contained in actual Statistics's topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats does not contain all given Flat elements.
   */
  public S hasOnlyTopThreeWorstReviewedFlats(Flat... topThreeWorstReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (topThreeWorstReviewedFlats == null) failWithMessage("Expecting topThreeWorstReviewedFlats parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeWorstReviewedFlats(), topThreeWorstReviewedFlats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedFlats contains <b>only</b> the given Flat elements in Collection and nothing else in whatever order.
   * @param topThreeWorstReviewedFlats the given elements that should be contained in actual Statistics's topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats does not contain all given Flat elements.
   */
  public S hasOnlyTopThreeWorstReviewedFlats(java.util.Collection<? extends Flat> topThreeWorstReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (topThreeWorstReviewedFlats == null) {
      failWithMessage("Expecting topThreeWorstReviewedFlats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeWorstReviewedFlats(), topThreeWorstReviewedFlats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedFlats does not contain the given Flat elements.
   *
   * @param topThreeWorstReviewedFlats the given elements that should not be in actual Statistics's topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats contains any given Flat elements.
   */
  public S doesNotHaveTopThreeWorstReviewedFlats(Flat... topThreeWorstReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat varargs is not null.
    if (topThreeWorstReviewedFlats == null) failWithMessage("Expecting topThreeWorstReviewedFlats parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeWorstReviewedFlats(), topThreeWorstReviewedFlats);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedFlats does not contain the given Flat elements in Collection.
   *
   * @param topThreeWorstReviewedFlats the given elements that should not be in actual Statistics's topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats contains any given Flat elements.
   */
  public S doesNotHaveTopThreeWorstReviewedFlats(java.util.Collection<? extends Flat> topThreeWorstReviewedFlats) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Flat collection is not null.
    if (topThreeWorstReviewedFlats == null) {
      failWithMessage("Expecting topThreeWorstReviewedFlats parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeWorstReviewedFlats(), topThreeWorstReviewedFlats.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeWorstReviewedFlats.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedFlats is not empty.
   */
  public S hasNoTopThreeWorstReviewedFlats() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeWorstReviewedFlats but had :\n  <%s>";

    // check
    if (actual.getTopThreeWorstReviewedFlats().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeWorstReviewedFlats());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedHosts contains the given Host elements.
   * @param topThreeWorstReviewedHosts the given elements that should be contained in actual Statistics's topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts does not contain all given Host elements.
   */
  public S hasTopThreeWorstReviewedHosts(Host... topThreeWorstReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host varargs is not null.
    if (topThreeWorstReviewedHosts == null) failWithMessage("Expecting topThreeWorstReviewedHosts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeWorstReviewedHosts(), topThreeWorstReviewedHosts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedHosts contains the given Host elements in Collection.
   * @param topThreeWorstReviewedHosts the given elements that should be contained in actual Statistics's topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts does not contain all given Host elements.
   */
  public S hasTopThreeWorstReviewedHosts(java.util.Collection<? extends Host> topThreeWorstReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host collection is not null.
    if (topThreeWorstReviewedHosts == null) {
      failWithMessage("Expecting topThreeWorstReviewedHosts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeWorstReviewedHosts(), topThreeWorstReviewedHosts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedHosts contains <b>only</b> the given Host elements and nothing else in whatever order.
   * @param topThreeWorstReviewedHosts the given elements that should be contained in actual Statistics's topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts does not contain all given Host elements.
   */
  public S hasOnlyTopThreeWorstReviewedHosts(Host... topThreeWorstReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host varargs is not null.
    if (topThreeWorstReviewedHosts == null) failWithMessage("Expecting topThreeWorstReviewedHosts parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeWorstReviewedHosts(), topThreeWorstReviewedHosts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedHosts contains <b>only</b> the given Host elements in Collection and nothing else in whatever order.
   * @param topThreeWorstReviewedHosts the given elements that should be contained in actual Statistics's topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts does not contain all given Host elements.
   */
  public S hasOnlyTopThreeWorstReviewedHosts(java.util.Collection<? extends Host> topThreeWorstReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host collection is not null.
    if (topThreeWorstReviewedHosts == null) {
      failWithMessage("Expecting topThreeWorstReviewedHosts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeWorstReviewedHosts(), topThreeWorstReviewedHosts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedHosts does not contain the given Host elements.
   *
   * @param topThreeWorstReviewedHosts the given elements that should not be in actual Statistics's topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts contains any given Host elements.
   */
  public S doesNotHaveTopThreeWorstReviewedHosts(Host... topThreeWorstReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host varargs is not null.
    if (topThreeWorstReviewedHosts == null) failWithMessage("Expecting topThreeWorstReviewedHosts parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeWorstReviewedHosts(), topThreeWorstReviewedHosts);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedHosts does not contain the given Host elements in Collection.
   *
   * @param topThreeWorstReviewedHosts the given elements that should not be in actual Statistics's topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts contains any given Host elements.
   */
  public S doesNotHaveTopThreeWorstReviewedHosts(java.util.Collection<? extends Host> topThreeWorstReviewedHosts) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Host collection is not null.
    if (topThreeWorstReviewedHosts == null) {
      failWithMessage("Expecting topThreeWorstReviewedHosts parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeWorstReviewedHosts(), topThreeWorstReviewedHosts.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeWorstReviewedHosts.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedHosts is not empty.
   */
  public S hasNoTopThreeWorstReviewedHosts() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeWorstReviewedHosts but had :\n  <%s>";

    // check
    if (actual.getTopThreeWorstReviewedHosts().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeWorstReviewedHosts());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedTenants contains the given Tenant elements.
   * @param topThreeWorstReviewedTenants the given elements that should be contained in actual Statistics's topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants does not contain all given Tenant elements.
   */
  public S hasTopThreeWorstReviewedTenants(Tenant... topThreeWorstReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant varargs is not null.
    if (topThreeWorstReviewedTenants == null) failWithMessage("Expecting topThreeWorstReviewedTenants parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeWorstReviewedTenants(), topThreeWorstReviewedTenants);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedTenants contains the given Tenant elements in Collection.
   * @param topThreeWorstReviewedTenants the given elements that should be contained in actual Statistics's topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants does not contain all given Tenant elements.
   */
  public S hasTopThreeWorstReviewedTenants(java.util.Collection<? extends Tenant> topThreeWorstReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant collection is not null.
    if (topThreeWorstReviewedTenants == null) {
      failWithMessage("Expecting topThreeWorstReviewedTenants parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTopThreeWorstReviewedTenants(), topThreeWorstReviewedTenants.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedTenants contains <b>only</b> the given Tenant elements and nothing else in whatever order.
   * @param topThreeWorstReviewedTenants the given elements that should be contained in actual Statistics's topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants does not contain all given Tenant elements.
   */
  public S hasOnlyTopThreeWorstReviewedTenants(Tenant... topThreeWorstReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant varargs is not null.
    if (topThreeWorstReviewedTenants == null) failWithMessage("Expecting topThreeWorstReviewedTenants parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeWorstReviewedTenants(), topThreeWorstReviewedTenants);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedTenants contains <b>only</b> the given Tenant elements in Collection and nothing else in whatever order.
   * @param topThreeWorstReviewedTenants the given elements that should be contained in actual Statistics's topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants does not contain all given Tenant elements.
   */
  public S hasOnlyTopThreeWorstReviewedTenants(java.util.Collection<? extends Tenant> topThreeWorstReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant collection is not null.
    if (topThreeWorstReviewedTenants == null) {
      failWithMessage("Expecting topThreeWorstReviewedTenants parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTopThreeWorstReviewedTenants(), topThreeWorstReviewedTenants.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedTenants does not contain the given Tenant elements.
   *
   * @param topThreeWorstReviewedTenants the given elements that should not be in actual Statistics's topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants contains any given Tenant elements.
   */
  public S doesNotHaveTopThreeWorstReviewedTenants(Tenant... topThreeWorstReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant varargs is not null.
    if (topThreeWorstReviewedTenants == null) failWithMessage("Expecting topThreeWorstReviewedTenants parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeWorstReviewedTenants(), topThreeWorstReviewedTenants);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics's topThreeWorstReviewedTenants does not contain the given Tenant elements in Collection.
   *
   * @param topThreeWorstReviewedTenants the given elements that should not be in actual Statistics's topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants contains any given Tenant elements.
   */
  public S doesNotHaveTopThreeWorstReviewedTenants(java.util.Collection<? extends Tenant> topThreeWorstReviewedTenants) {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // check that given Tenant collection is not null.
    if (topThreeWorstReviewedTenants == null) {
      failWithMessage("Expecting topThreeWorstReviewedTenants parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTopThreeWorstReviewedTenants(), topThreeWorstReviewedTenants.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Statistics has no topThreeWorstReviewedTenants.
   * @return this assertion object.
   * @throws AssertionError if the actual Statistics's topThreeWorstReviewedTenants is not empty.
   */
  public S hasNoTopThreeWorstReviewedTenants() {
    // check that actual Statistics we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have topThreeWorstReviewedTenants but had :\n  <%s>";

    // check
    if (actual.getTopThreeWorstReviewedTenants().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTopThreeWorstReviewedTenants());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
